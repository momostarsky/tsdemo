### set log levels ###
# 优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。
#
#　　　　ALL   最低等级的，用于打开所有日志记录。
#　　　　TRACE 很低的日志级别，一般不会使用。
#　　　　DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。
#　　　　INFO  消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。
#　　　　WARN  表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。
#　　　　ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。
#　　　　FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。
#　　　　OFF   最高等级的，用于关闭所有日志记录。
#　　如果将log level设置在某一个级别上，那么比此级别优先级高的log都能打印出来。
#    例如，如果设置优先级为WARN，那么OFF、FATAL、ERROR、WARN 4个级别的log能正常输出，
#    而INFO、DEBUG、TRACE、 ALL级别的log则会被忽略。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。




log4j.rootLogger = DEBUG,stdout,D,E
# 配置日志信息输出目的地
# 基本格式为 log4j.rootLogger = LEVEL, appenderName1 ,  appenderName2  ，只能有一个等级的哦，不能存在多个等级，否则会报错



log4j.appender.stdout = org.apache.log4j.ConsoleAppender
# Target是输出目的地的目标
log4j.appender.stdout.Target = System.out
# 指定日志消息的输出最低层次
log4j.appender.stdout.Threshold = INFO
# 定义名为stdout的输出端的layout类型
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
# 如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern ，打印参数如下：

#　　%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#　　%r: 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c: 输出日志信息所属的类目，通常就是所在类的全名
#　　%t: 输出产生该日志事件的线程名
#　　%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.Java:10)
#　　%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像Java servlets这样的多客户多线程的应用中。
#　　%%: 输出一个"%"字符
#　　%F: 输出日志消息产生时所在的文件名称
#　　%L: 输出代码中的行号
#　　%m: 输出代码中指定的消息,产生的日志具体信息 （注意下文log的使用时传入的参数）
#　　%n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
#　　%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
#　　可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#
#　　%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#　　%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#　　%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#　　%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。


log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss} %l%m%n



# 名字为D的对应日志处理
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
# File是输出目的地的文件名
log4j.appender.D.File = LOG//app_debug.log
#false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.TTCCLayout



# 名字为E的对应日志处理
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = LOG//app_error.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n



##########################
# 对不同的类输出不同的日志文件
##########################

# cn.jpxs 包下的日志单独输出
log4j.logger.cn.jpxs=ALL,jpxs
# 设置为false该日志信息就不会加入到rootLogger中了
log4j.additivity.cn.jpxs=false
# 下面就和上面配置一样了
log4j.appender.jpxs=org.apache.log4j.RollingFileAppender
log4j.appender.jpxs.Encoding=UTF-8
log4j.appender.jpxs.File=LOG/jpxs.log
log4j.appender.jpxs.MaxFileSize=10MB
log4j.appender.jpxs.MaxBackupIndex=3
log4j.appender.jpxs.layout=org.apache.log4j.PatternLayout
log4j.appender.jpxs.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n
